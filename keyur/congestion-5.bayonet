
parameters{ NUM_PACKETS(3), COST_01(2), COST_02(1), COST_21(1) }

num_steps 30;

query probability(pkt_count@H1 < NUM_PACKETS);

topology{
	nodes{ H0, H1, S0, S1, S2 }
	links{
		(H0,pt1) <-> (S0,pt3),
		(S0,pt1) <-> (S1,pt1),
		(S0,pt2) <-> (S2,pt1),
		(S1,pt2) <-> (S2,pt2),
		(S1,pt3) <-> (H1,pt1)
	}
}
queue_capacity 2;

packet_fields{ dst }

programs{ H0 -> h0, H1 -> h1, S0 -> s0, S1 -> s1, S2 -> s2 }


def h0(pkt, port) state pkt_count(0){
	new;
	if pkt_count < NUM_PACKETS {
		new;
		pkt_count = pkt_count + 1;
		pkt.dst = H1;
		fwd(1);
	} else { drop; drop; }
}

def h1(pkt, port) state pkt_count(0){ pkt_count = pkt_count + 1; drop; }


def s0(pkt, port) state route1(0), route2(0){
	if port == 1{
		fwd(3);
	}else if port == 2{
		if pkt.dst == H0{
			fwd(3);
		}else{
			fwd(1);
		}
	}else if port == 3{
		route1 = COST_01;
		route2 = COST_02 + COST_21;
		if route1 < route2 or route1 == route2 and flip(1/2) == 1 {
			fwd(1);
		}else{
			fwd(2);
		}
	}
}

def s1(pkt, port) state route1(0), route2(0){
	if port == 1 {
		fwd(3);
	}else if port == 2{
		if pkt.dst == H1{
			fwd(3);
		}else{
			fwd(1);
		}
	}else if port == 3{
		route1 = COST_01;
		route2 = COST_02 + COST_21;
		if route1 < route2 or route1 == route2 and flip(1/2) == 1 {
			fwd(1);
		}else{
			fwd(2);
		}
	}
}

def s2(pkt, port){
	if port == 1 {
		fwd(2);
	}else{
		fwd(1);
	}
}

def scheduler()/*state cur_action(0)*/{
	/*action := cur_action%2;
	node := floor(cur_action/2);
	cur_action += 1;
	cur_action %= 2*k;
	return (action,node);*/
	actions := ([]: (R x R)[]);
	for i in [0..k){
		if (Q_in@i).size() > 0 { actions ~= [(RunSw,i)]; }
		if (Q_out@i).size() > 0 { actions ~= [(FwdQ,i)]; }
	}
	return actions[uniformInt(0,actions.length-1)];

	/*n_actions := 0;
	for i in [0..k){
		if (Q_in@i).size() > 0 { n_actions += 1; }
		if (Q_out@i).size() > 0 { n_actions += 1; }
	}
	cur_action := 0;
	the_action := uniformInt(0,n_actions-1);
	for i in [0..k){
		if (Q_in@i).size() > 0 { if cur_action == the_action { return (RunSw,i); } cur_action += 1; }
		if (Q_out@i).size() > 0 { if cur_action == the_action { return (FwdQ,i); } cur_action += 1; }
	}
	assert(0);
	return (0,0); // TODO: make unnecessary!*/
	/*return infer((){
		action := if flip(1/2){ RunSw } else { FwdQ };
		node := uniformInt(0,k-1);
		if action == RunSw{ observe((Q_in@node).size()>0); }
		if action == FwdQ{ observe((Q_out@node).size()>0); }
		return (action,node);
	}).sample();*/
	/*action := if flip(1/2){ RunSw } else { FwdQ };
	node := uniformInt(0,k-1);
	return (action,node);*/
}
