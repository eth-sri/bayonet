num_steps := 50;
dat Queue{
    data: (Packet × ℝ)[];
    def Queue(){
        data = ([]:(Packet × ℝ)[]);
    }
    def pushFront(x: Packet × ℝ){
        if size() >= 2 { return; }
        data=[x]~data;
    }
    def pushBack(x: Packet × ℝ){
        if size() >= 2 { return; }
        data=data~[x];
    }
    def takeFront(){
        r:=front();
        popFront();
        return r;
    }
    def takeBack(){
        r:=data[size()-1];
        data=data[0..size()-1];
        return r;
    }
    def size(){
        return data.length;
    }
    def front(){
        return data[0];
    }
    def dupFront(){
        if size() == 0 { return; }
        pushFront(front());
    }
    def popFront(){
        if size() == 0 { return; }
        data=data[1..size()];
    }
}
k := 8, H0 := 0, H1 := 1, S0 := 2, S1 := 3, S2 := 4, S3 := 5, S4 := 6, S5 := 7;
NUM_PACKETS := 3, COST_01 := 2, COST_02 := 1, COST_21 := 1;
dat Packet{
    dst: ℝ;
    def Packet(){
        dst = 0;
    }
}
dat __h0_ty{
    Q_in: Queue, Q_out: Queue;
    pkt_count: ℝ;
    def __h0_ty(){
        Q_in = Queue();
        Q_out = Queue();
        pkt_count = 0;
    }
    def __run(){
        Q_in.pushFront((Packet(),0));
        if (pkt_count<NUM_PACKETS){
            Q_in.pushFront((Packet(),0));
            pkt_count = (pkt_count+1);
            Q_in.data[0][0].dst = H1;
            if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],1)); }
        } else {
            Q_in.popFront();
            Q_in.popFront();
        }
    }
}
dat __h1_ty{
    Q_in: Queue, Q_out: Queue;
    pkt_count: ℝ;
    def __h1_ty(){
        Q_in = Queue();
        Q_out = Queue();
        pkt_count = 0;
    }
    def __run(){
        pkt_count = (pkt_count+1);
        Q_in.popFront();
    }
}
dat __s0_ty{
    Q_in: Queue, Q_out: Queue;
    route1: ℝ, route2: ℝ;
    def __s0_ty(){
        Q_in = Queue();
        Q_out = Queue();
        route1 = 0;
        route2 = 0;
    }
    def __run(){
        if (Q_in.data[0][1]==1){
            if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],3)); }
        } else {
            if (Q_in.data[0][1]==2){
                if (Q_in.data[0][0].dst==H0){
                    if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],3)); }
                } else {
                    if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],1)); }
                }
            } else {
                if (Q_in.data[0][1]==3){
                    route1 = COST_01;
                    route2 = (COST_02+COST_21);
                    if ((route1<route2)||((route1==route2)&&(flip((1/2))==1))){
                        if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],1)); }
                    } else {
                        if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],2)); }
                    }
                }
            }
        }
    }
}
dat __s1_ty{
    Q_in: Queue, Q_out: Queue;
    route1: ℝ, route2: ℝ;
    def __s1_ty(){
        Q_in = Queue();
        Q_out = Queue();
        route1 = 0;
        route2 = 0;
    }
    def __run(){
        if (Q_in.data[0][1]==1){
            if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],3)); }
        } else {
            if (Q_in.data[0][1]==2){
                if (Q_in.data[0][0].dst==H1){
                    if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],3)); }
                } else {
                    if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],1)); }
                }
            } else {
                if (Q_in.data[0][1]==3){
                    route1 = COST_01;
                    route2 = (COST_02+COST_21);
                    if ((route1<route2)||((route1==route2)&&(flip((1/2))==1))){
                        if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],1)); }
                    } else {
                        if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],2)); }
                    }
                }
            }
        }
    }
}
dat __s2_ty{
    Q_in: Queue, Q_out: Queue;
    def __s2_ty(){
        Q_in = Queue();
        Q_out = Queue();
    }
    def __run(){
        if (Q_in.data[0][1]==1){
            if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],2)); }
        } else {
            if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],1)); }
        }
    }
}
RunSw:=0, FwdQ:=1;
dat __D{
    __H0 : __h0_ty, __H1 : __h1_ty, __S0 : __s0_ty, __S1 : __s1_ty, __S2 : __s2_ty, __S3 : __s0_ty, __S4 : __s1_ty, __S5 : __s2_ty;
    next: ℝ;
    def __D(){
        __H0 = __h0_ty(), __H1 = __h1_ty(), __S0 = __s0_ty(), __S1 = __s1_ty(), __S2 = __s2_ty(), __S3 = __s0_ty(), __S4 = __s1_ty(), __S5 = __s2_ty();
        next = 0;
    }
    def scheduler(){
        for i in [0..2 * k){
            current := next;
            next = (next + 1) % (2 * k);
            if current < k && (if current == 0 { __H0.Q_in } else if current == 1 { __H1.Q_in } else if current == 2 { __S0.Q_in } else if current == 3 { __S1.Q_in } else if current == 4 { __S2.Q_in } else if current == 5 { __S3.Q_in } else if current == 6 { __S4.Q_in } else  { __S5.Q_in }).size() > 0 {
                return (RunSw,current);
            } else if current >= k && (if (current - k) == 0 { __H0.Q_out } else if (current - k) == 1 { __H1.Q_out } else if (current - k) == 2 { __S0.Q_out } else if (current - k) == 3 { __S1.Q_out } else if (current - k) == 4 { __S2.Q_out } else if (current - k) == 5 { __S3.Q_out } else if (current - k) == 6 { __S4.Q_out } else  { __S5.Q_out }).size() > 0 {
                return (FwdQ,current - k);
            }
        }
        assert(0);
    }
    def __step(){
        if __H0.Q_in.size() || __H0.Q_out.size() || __H1.Q_in.size() || __H1.Q_out.size() || __S0.Q_in.size() || __S0.Q_out.size() || __S1.Q_in.size() || __S1.Q_out.size() || __S2.Q_in.size() || __S2.Q_out.size() || __S3.Q_in.size() || __S3.Q_out.size() || __S4.Q_in.size() || __S4.Q_out.size() || __S5.Q_in.size() || __S5.Q_out.size() {
            (action,node) := scheduler();
            if action {
                if node == 0 && __H0.Q_out.size() {
                    (pkt,port) := __H0.Q_out.takeFront();
                    if port == 1 {
                        __S0.Q_in.pushBack((pkt, 3));
                    }
                }
                if node == 1 && __H1.Q_out.size() {
                    (pkt,port) := __H1.Q_out.takeFront();
                    if port == 1 {
                        __S4.Q_in.pushBack((pkt, 3));
                    }
                }
                if node == 2 && __S0.Q_out.size() {
                    (pkt,port) := __S0.Q_out.takeFront();
                    if port == 1 {
                        __S1.Q_in.pushBack((pkt, 1));
                    }
                    if port == 2 {
                        __S2.Q_in.pushBack((pkt, 1));
                    }
                    if port == 3 {
                        __H0.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 3 && __S1.Q_out.size() {
                    (pkt,port) := __S1.Q_out.takeFront();
                    if port == 1 {
                        __S0.Q_in.pushBack((pkt, 1));
                    }
                    if port == 2 {
                        __S2.Q_in.pushBack((pkt, 2));
                    }
                    if port == 3 {
                        __S3.Q_in.pushBack((pkt, 3));
                    }
                }
                if node == 4 && __S2.Q_out.size() {
                    (pkt,port) := __S2.Q_out.takeFront();
                    if port == 1 {
                        __S0.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S1.Q_in.pushBack((pkt, 2));
                    }
                }
                if node == 5 && __S3.Q_out.size() {
                    (pkt,port) := __S3.Q_out.takeFront();
                    if port == 1 {
                        __S4.Q_in.pushBack((pkt, 1));
                    }
                    if port == 2 {
                        __S5.Q_in.pushBack((pkt, 1));
                    }
                    if port == 3 {
                        __S1.Q_in.pushBack((pkt, 3));
                    }
                }
                if node == 6 && __S4.Q_out.size() {
                    (pkt,port) := __S4.Q_out.takeFront();
                    if port == 1 {
                        __S3.Q_in.pushBack((pkt, 1));
                    }
                    if port == 2 {
                        __S5.Q_in.pushBack((pkt, 2));
                    }
                    if port == 3 {
                        __H1.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 7 && __S5.Q_out.size() {
                    (pkt,port) := __S5.Q_out.takeFront();
                    if port == 1 {
                        __S3.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S4.Q_in.pushBack((pkt, 2));
                    }
                }
            } else {
                if node == 0 && __H0.Q_in.size() {
                    __H0.__run();
                }
                if node == 1 && __H1.Q_in.size() {
                    __H1.__run();
                }
                if node == 2 && __S0.Q_in.size() {
                    __S0.__run();
                }
                if node == 3 && __S1.Q_in.size() {
                    __S1.__run();
                }
                if node == 4 && __S2.Q_in.size() {
                    __S2.__run();
                }
                if node == 5 && __S3.Q_in.size() {
                    __S3.__run();
                }
                if node == 6 && __S4.Q_in.size() {
                    __S4.__run();
                }
                if node == 7 && __S5.Q_in.size() {
                    __S5.__run();
                }
            }
        }
    }
}
def main(){
    __d := __D();
    __d.__H0.Q_in.pushBack((Packet(),0));
    __d.__H0.__run();
    repeat num_steps {
        __d.__step();
    }
    assert(!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size() || __d.__S4.Q_in.size() || __d.__S4.Q_out.size() || __d.__S5.Q_in.size() || __d.__S5.Q_out.size()));
    q₁ := Expectation(((if H0 == 0 { __d.__H0.pkt_count } else if H0 == 1 { __d.__H1.pkt_count } else { assert(0) }) < NUM_PACKETS) !=0);
    q₂ := Expectation(((if H1 == 0 { __d.__H0.pkt_count } else if H1 == 1 { __d.__H1.pkt_count } else { assert(0) }) < NUM_PACKETS) !=0);
    return (q₁, q₂);
}

