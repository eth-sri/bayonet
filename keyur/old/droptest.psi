num_steps := 10;
dat Queue{
    data: (Packet × ℝ)[];
    def Queue(){
        data = ([]:(Packet × ℝ)[]);
    }
    def pushFront(x: Packet × ℝ){
        if size() >= 2 { return; }
        data=[x]~data;
    }
    def pushBack(x: Packet × ℝ){
        if size() >= 2 { return; }
        data=data~[x];
    }
    def takeFront(){
        r:=front();
        popFront();
        return r;
    }
    def takeBack(){
        r:=data[size()-1];
        data=data[0..size()-1];
        return r;
    }
    def size(){
        return data.length;
    }
    def front(){
        return data[0];
    }
    def dupFront(){
        if size() == 0 { return; }
        pushFront(front());
    }
    def popFront(){
        if size() == 0 { return; }
        data=data[1..size()];
    }
}
k := 2, H0 := 0, H1 := 1;
NUM_PACKETS := 2;
dat Packet{
    def Packet(){
    }
}
dat __h0_ty{
    Q_in: Queue, Q_out: Queue;
    dummy: ℝ;
    def __h0_ty(){
        Q_in = Queue();
        Q_out = Queue();
        dummy = 0;
    }
    def __run(){
        Q_in.popFront();
        Q_in.popFront();
    }
}
dat __h1_ty{
    Q_in: Queue, Q_out: Queue;
    def __h1_ty(){
        Q_in = Queue();
        Q_out = Queue();
    }
    def __run(){
        Q_in.popFront();
    }
}
RunSw:=0, FwdQ:=1;
dat __D{
    __H0 : __h0_ty, __H1 : __h1_ty;
    def __D(){
        __H0 = __h0_ty(), __H1 = __h1_ty();
    }
    def scheduler(){
        actions := ([]: (R x R)[]);
        for i in [0..k){
            if (if i == 0 { __H0.Q_in } else  { __H1.Q_in }).size() > 0 {
                actions ~= [(RunSw,i)];
            }
            if (if i == 0 { __H0.Q_out } else  { __H1.Q_out }).size() > 0 {
                actions ~= [(FwdQ,i)];
            }
        }
        return actions[uniformInt(0,actions.length - 1)];
    }
    def __step(){
        if __H0.Q_in.size() || __H0.Q_out.size() || __H1.Q_in.size() || __H1.Q_out.size() {
            (action,node) := scheduler();
            if action {
                if node == 0 && __H0.Q_out.size() {
                    (pkt,port) := __H0.Q_out.takeFront();
                    if port == 1 {
                        __H1.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 1 && __H1.Q_out.size() {
                    (pkt,port) := __H1.Q_out.takeFront();
                    if port == 1 {
                        __H0.Q_in.pushBack((pkt, 1));
                    }
                }
            } else {
                if node == 0 && __H0.Q_in.size() {
                    __H0.__run();
                }
                if node == 1 && __H1.Q_in.size() {
                    __H1.__run();
                }
            }
        }
    }
}
def main(){
    __d := __D();
    __d.__H0.Q_in.pushBack((Packet(),0));
    __d.__H0.__run();
    repeat num_steps {
        __d.__step();
    }
    assert(!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size()));
    q₁ := Expectation(((if H0 == 0 { __d.__H0.dummy } else { assert(0) }) < 1) !=0);
    return (q₁);
}

