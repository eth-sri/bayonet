num_steps := 50;
dat Queue{
    data: (Packet × ℝ)[];
    def Queue(){
        data = ([]:(Packet × ℝ)[]);
    }
    def pushFront(x: Packet × ℝ){
        if size() >= 2 { return; }
        data=[x]~data;
    }
    def pushBack(x: Packet × ℝ){
        if size() >= 2 { return; }
        data=data~[x];
    }
    def takeFront(){
        r:=front();
        popFront();
        return r;
    }
    def takeBack(){
        r:=data[size()-1];
        data=data[0..size()-1];
        return r;
    }
    def size(){
        return data.length;
    }
    def front(){
        return data[0];
    }
    def dupFront(){
        if size() == 0 { return; }
        pushFront(front());
    }
    def popFront(){
        if size() == 0 { return; }
        data=data[1..size()];
    }
}
k := 30, H0 := 0, H1 := 1, S0 := 2, S1 := 3, S2 := 4, S3 := 5, S4 := 6, S5 := 7, S6 := 8, S7 := 9, S8 := 10, S9 := 11, S10 := 12, S11 := 13, S12 := 14, S13 := 15, S14 := 16, S15 := 17, S16 := 18, S17 := 19, S18 := 20, S19 := 21, S20 := 22, S21 := 23, S22 := 24, S23 := 25, S24 := 26, S25 := 27, S26 := 28, S27 := 29;
dat Packet{
    def Packet(){
    }
}
dat __h0_ty{
    Q_in: Queue, Q_out: Queue;
    def __h0_ty(){
        Q_in = Queue();
        Q_out = Queue();
    }
    def __run(){
        if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],1)); }
    }
}
dat __h1_ty{
    Q_in: Queue, Q_out: Queue;
    arrived: ℝ;
    def __h1_ty(){
        Q_in = Queue();
        Q_out = Queue();
        arrived = 0;
    }
    def __run(){
        arrived = 1;
        Q_in.popFront();
    }
}
dat __s0_ty{
    Q_in: Queue, Q_out: Queue;
    def __s0_ty(){
        Q_in = Queue();
        Q_out = Queue();
    }
    def __run(){
        if (flip((1/2))==1){
            if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],2)); }
        } else {
            if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],3)); }
        }
    }
}
dat __s1_ty{
    Q_in: Queue, Q_out: Queue;
    def __s1_ty(){
        Q_in = Queue();
        Q_out = Queue();
    }
    def __run(){
        if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],2)); }
    }
}
dat __s2_ty{
    Q_in: Queue, Q_out: Queue;
    failing: ℝ;
    def __s2_ty(){
        Q_in = Queue();
        Q_out = Queue();
        failing = 2;
    }
    def __run(){
        if (failing==2){
            if (flip((1/1000))==1){
                failing = 1;
            } else {
                failing = 0;
            }
        }
        if (failing==1){
            Q_in.popFront();
        } else {
            if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],2)); }
        }
    }
}
dat __s3_ty{
    Q_in: Queue, Q_out: Queue;
    def __s3_ty(){
        Q_in = Queue();
        Q_out = Queue();
    }
    def __run(){
        if(Q_in.size()>0){ Q_out.pushBack((Q_in.takeFront()[0],3)); }
    }
}
RunSw:=0, FwdQ:=1;
dat __D{
    __H0 : __h0_ty, __H1 : __h1_ty, __S0 : __s0_ty, __S1 : __s1_ty, __S2 : __s2_ty, __S3 : __s3_ty, __S4 : __s0_ty, __S5 : __s1_ty, __S6 : __s2_ty, __S7 : __s3_ty, __S8 : __s0_ty, __S9 : __s1_ty, __S10 : __s2_ty, __S11 : __s3_ty, __S12 : __s0_ty, __S13 : __s1_ty, __S14 : __s2_ty, __S15 : __s3_ty, __S16 : __s0_ty, __S17 : __s1_ty, __S18 : __s2_ty, __S19 : __s3_ty, __S20 : __s0_ty, __S21 : __s1_ty, __S22 : __s2_ty, __S23 : __s3_ty, __S24 : __s0_ty, __S25 : __s1_ty, __S26 : __s2_ty, __S27 : __s3_ty;
    num_actions: ℝ;
    def __D(){
        __H0 = __h0_ty(), __H1 = __h1_ty(), __S0 = __s0_ty(), __S1 = __s1_ty(), __S2 = __s2_ty(), __S3 = __s3_ty(), __S4 = __s0_ty(), __S5 = __s1_ty(), __S6 = __s2_ty(), __S7 = __s3_ty(), __S8 = __s0_ty(), __S9 = __s1_ty(), __S10 = __s2_ty(), __S11 = __s3_ty(), __S12 = __s0_ty(), __S13 = __s1_ty(), __S14 = __s2_ty(), __S15 = __s3_ty(), __S16 = __s0_ty(), __S17 = __s1_ty(), __S18 = __s2_ty(), __S19 = __s3_ty(), __S20 = __s0_ty(), __S21 = __s1_ty(), __S22 = __s2_ty(), __S23 = __s3_ty(), __S24 = __s0_ty(), __S25 = __s1_ty(), __S26 = __s2_ty(), __S27 = __s3_ty();
        num_actions = 0;
    }
    def scheduler(){
        actions := ([]: (R x R)[]);
        for i in [0..k){
            if (if i == 0 { __H0.Q_in } else if i == 1 { __H1.Q_in } else if i == 2 { __S0.Q_in } else if i == 3 { __S1.Q_in } else if i == 4 { __S2.Q_in } else if i == 5 { __S3.Q_in } else if i == 6 { __S4.Q_in } else if i == 7 { __S5.Q_in } else if i == 8 { __S6.Q_in } else if i == 9 { __S7.Q_in } else if i == 10 { __S8.Q_in } else if i == 11 { __S9.Q_in } else if i == 12 { __S10.Q_in } else if i == 13 { __S11.Q_in } else if i == 14 { __S12.Q_in } else if i == 15 { __S13.Q_in } else if i == 16 { __S14.Q_in } else if i == 17 { __S15.Q_in } else if i == 18 { __S16.Q_in } else if i == 19 { __S17.Q_in } else if i == 20 { __S18.Q_in } else if i == 21 { __S19.Q_in } else if i == 22 { __S20.Q_in } else if i == 23 { __S21.Q_in } else if i == 24 { __S22.Q_in } else if i == 25 { __S23.Q_in } else if i == 26 { __S24.Q_in } else if i == 27 { __S25.Q_in } else if i == 28 { __S26.Q_in } else  { __S27.Q_in }).size() > 0 {
                actions ~= [(RunSw,i)];
            }
            if (if i == 0 { __H0.Q_out } else if i == 1 { __H1.Q_out } else if i == 2 { __S0.Q_out } else if i == 3 { __S1.Q_out } else if i == 4 { __S2.Q_out } else if i == 5 { __S3.Q_out } else if i == 6 { __S4.Q_out } else if i == 7 { __S5.Q_out } else if i == 8 { __S6.Q_out } else if i == 9 { __S7.Q_out } else if i == 10 { __S8.Q_out } else if i == 11 { __S9.Q_out } else if i == 12 { __S10.Q_out } else if i == 13 { __S11.Q_out } else if i == 14 { __S12.Q_out } else if i == 15 { __S13.Q_out } else if i == 16 { __S14.Q_out } else if i == 17 { __S15.Q_out } else if i == 18 { __S16.Q_out } else if i == 19 { __S17.Q_out } else if i == 20 { __S18.Q_out } else if i == 21 { __S19.Q_out } else if i == 22 { __S20.Q_out } else if i == 23 { __S21.Q_out } else if i == 24 { __S22.Q_out } else if i == 25 { __S23.Q_out } else if i == 26 { __S24.Q_out } else if i == 27 { __S25.Q_out } else if i == 28 { __S26.Q_out } else  { __S27.Q_out }).size() > 0 {
                actions ~= [(FwdQ,i)];
            }
        }
        num_actions += 1;
        return actions[uniformInt(0,actions.length - 1)];
    }
    def __step(){
        if __H0.Q_in.size() || __H0.Q_out.size() || __H1.Q_in.size() || __H1.Q_out.size() || __S0.Q_in.size() || __S0.Q_out.size() || __S1.Q_in.size() || __S1.Q_out.size() || __S2.Q_in.size() || __S2.Q_out.size() || __S3.Q_in.size() || __S3.Q_out.size() || __S4.Q_in.size() || __S4.Q_out.size() || __S5.Q_in.size() || __S5.Q_out.size() || __S6.Q_in.size() || __S6.Q_out.size() || __S7.Q_in.size() || __S7.Q_out.size() || __S8.Q_in.size() || __S8.Q_out.size() || __S9.Q_in.size() || __S9.Q_out.size() || __S10.Q_in.size() || __S10.Q_out.size() || __S11.Q_in.size() || __S11.Q_out.size() || __S12.Q_in.size() || __S12.Q_out.size() || __S13.Q_in.size() || __S13.Q_out.size() || __S14.Q_in.size() || __S14.Q_out.size() || __S15.Q_in.size() || __S15.Q_out.size() || __S16.Q_in.size() || __S16.Q_out.size() || __S17.Q_in.size() || __S17.Q_out.size() || __S18.Q_in.size() || __S18.Q_out.size() || __S19.Q_in.size() || __S19.Q_out.size() || __S20.Q_in.size() || __S20.Q_out.size() || __S21.Q_in.size() || __S21.Q_out.size() || __S22.Q_in.size() || __S22.Q_out.size() || __S23.Q_in.size() || __S23.Q_out.size() || __S24.Q_in.size() || __S24.Q_out.size() || __S25.Q_in.size() || __S25.Q_out.size() || __S26.Q_in.size() || __S26.Q_out.size() || __S27.Q_in.size() || __S27.Q_out.size() {
            (action,node) := scheduler();
            if action {
                if node == 0 && __H0.Q_out.size() {
                    (pkt,port) := __H0.Q_out.takeFront();
                    if port == 1 {
                        __S0.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 1 && __H1.Q_out.size() {
                    (pkt,port) := __H1.Q_out.takeFront();
                    if port == 1 {
                        __S27.Q_in.pushBack((pkt, 3));
                    }
                }
                if node == 2 && __S0.Q_out.size() {
                    (pkt,port) := __S0.Q_out.takeFront();
                    if port == 1 {
                        __H0.Q_in.pushBack((pkt, 1));
                    }
                    if port == 2 {
                        __S1.Q_in.pushBack((pkt, 1));
                    }
                    if port == 3 {
                        __S2.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 3 && __S1.Q_out.size() {
                    (pkt,port) := __S1.Q_out.takeFront();
                    if port == 1 {
                        __S0.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S3.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 4 && __S2.Q_out.size() {
                    (pkt,port) := __S2.Q_out.takeFront();
                    if port == 1 {
                        __S0.Q_in.pushBack((pkt, 3));
                    }
                    if port == 2 {
                        __S3.Q_in.pushBack((pkt, 2));
                    }
                }
                if node == 5 && __S3.Q_out.size() {
                    (pkt,port) := __S3.Q_out.takeFront();
                    if port == 1 {
                        __S1.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S2.Q_in.pushBack((pkt, 2));
                    }
                    if port == 3 {
                        __S4.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 6 && __S4.Q_out.size() {
                    (pkt,port) := __S4.Q_out.takeFront();
                    if port == 1 {
                        __S3.Q_in.pushBack((pkt, 3));
                    }
                    if port == 2 {
                        __S5.Q_in.pushBack((pkt, 1));
                    }
                    if port == 3 {
                        __S6.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 7 && __S5.Q_out.size() {
                    (pkt,port) := __S5.Q_out.takeFront();
                    if port == 1 {
                        __S4.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S7.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 8 && __S6.Q_out.size() {
                    (pkt,port) := __S6.Q_out.takeFront();
                    if port == 1 {
                        __S4.Q_in.pushBack((pkt, 3));
                    }
                    if port == 2 {
                        __S7.Q_in.pushBack((pkt, 2));
                    }
                }
                if node == 9 && __S7.Q_out.size() {
                    (pkt,port) := __S7.Q_out.takeFront();
                    if port == 1 {
                        __S5.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S6.Q_in.pushBack((pkt, 2));
                    }
                    if port == 3 {
                        __S8.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 10 && __S8.Q_out.size() {
                    (pkt,port) := __S8.Q_out.takeFront();
                    if port == 1 {
                        __S7.Q_in.pushBack((pkt, 3));
                    }
                    if port == 2 {
                        __S9.Q_in.pushBack((pkt, 1));
                    }
                    if port == 3 {
                        __S10.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 11 && __S9.Q_out.size() {
                    (pkt,port) := __S9.Q_out.takeFront();
                    if port == 1 {
                        __S8.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S11.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 12 && __S10.Q_out.size() {
                    (pkt,port) := __S10.Q_out.takeFront();
                    if port == 1 {
                        __S8.Q_in.pushBack((pkt, 3));
                    }
                    if port == 2 {
                        __S11.Q_in.pushBack((pkt, 2));
                    }
                }
                if node == 13 && __S11.Q_out.size() {
                    (pkt,port) := __S11.Q_out.takeFront();
                    if port == 1 {
                        __S9.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S10.Q_in.pushBack((pkt, 2));
                    }
                    if port == 3 {
                        __S12.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 14 && __S12.Q_out.size() {
                    (pkt,port) := __S12.Q_out.takeFront();
                    if port == 1 {
                        __S11.Q_in.pushBack((pkt, 3));
                    }
                    if port == 2 {
                        __S13.Q_in.pushBack((pkt, 1));
                    }
                    if port == 3 {
                        __S14.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 15 && __S13.Q_out.size() {
                    (pkt,port) := __S13.Q_out.takeFront();
                    if port == 1 {
                        __S12.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S15.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 16 && __S14.Q_out.size() {
                    (pkt,port) := __S14.Q_out.takeFront();
                    if port == 1 {
                        __S12.Q_in.pushBack((pkt, 3));
                    }
                    if port == 2 {
                        __S15.Q_in.pushBack((pkt, 2));
                    }
                }
                if node == 17 && __S15.Q_out.size() {
                    (pkt,port) := __S15.Q_out.takeFront();
                    if port == 1 {
                        __S13.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S14.Q_in.pushBack((pkt, 2));
                    }
                    if port == 3 {
                        __S16.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 18 && __S16.Q_out.size() {
                    (pkt,port) := __S16.Q_out.takeFront();
                    if port == 1 {
                        __S15.Q_in.pushBack((pkt, 3));
                    }
                    if port == 2 {
                        __S17.Q_in.pushBack((pkt, 1));
                    }
                    if port == 3 {
                        __S18.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 19 && __S17.Q_out.size() {
                    (pkt,port) := __S17.Q_out.takeFront();
                    if port == 1 {
                        __S16.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S19.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 20 && __S18.Q_out.size() {
                    (pkt,port) := __S18.Q_out.takeFront();
                    if port == 1 {
                        __S16.Q_in.pushBack((pkt, 3));
                    }
                    if port == 2 {
                        __S19.Q_in.pushBack((pkt, 2));
                    }
                }
                if node == 21 && __S19.Q_out.size() {
                    (pkt,port) := __S19.Q_out.takeFront();
                    if port == 1 {
                        __S17.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S18.Q_in.pushBack((pkt, 2));
                    }
                    if port == 3 {
                        __S20.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 22 && __S20.Q_out.size() {
                    (pkt,port) := __S20.Q_out.takeFront();
                    if port == 1 {
                        __S19.Q_in.pushBack((pkt, 3));
                    }
                    if port == 2 {
                        __S21.Q_in.pushBack((pkt, 1));
                    }
                    if port == 3 {
                        __S22.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 23 && __S21.Q_out.size() {
                    (pkt,port) := __S21.Q_out.takeFront();
                    if port == 1 {
                        __S20.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S23.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 24 && __S22.Q_out.size() {
                    (pkt,port) := __S22.Q_out.takeFront();
                    if port == 1 {
                        __S20.Q_in.pushBack((pkt, 3));
                    }
                    if port == 2 {
                        __S23.Q_in.pushBack((pkt, 2));
                    }
                }
                if node == 25 && __S23.Q_out.size() {
                    (pkt,port) := __S23.Q_out.takeFront();
                    if port == 1 {
                        __S21.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S22.Q_in.pushBack((pkt, 2));
                    }
                    if port == 3 {
                        __S24.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 26 && __S24.Q_out.size() {
                    (pkt,port) := __S24.Q_out.takeFront();
                    if port == 1 {
                        __S23.Q_in.pushBack((pkt, 3));
                    }
                    if port == 2 {
                        __S25.Q_in.pushBack((pkt, 1));
                    }
                    if port == 3 {
                        __S26.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 27 && __S25.Q_out.size() {
                    (pkt,port) := __S25.Q_out.takeFront();
                    if port == 1 {
                        __S24.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S27.Q_in.pushBack((pkt, 1));
                    }
                }
                if node == 28 && __S26.Q_out.size() {
                    (pkt,port) := __S26.Q_out.takeFront();
                    if port == 1 {
                        __S24.Q_in.pushBack((pkt, 3));
                    }
                    if port == 2 {
                        __S27.Q_in.pushBack((pkt, 2));
                    }
                }
                if node == 29 && __S27.Q_out.size() {
                    (pkt,port) := __S27.Q_out.takeFront();
                    if port == 1 {
                        __S25.Q_in.pushBack((pkt, 2));
                    }
                    if port == 2 {
                        __S26.Q_in.pushBack((pkt, 2));
                    }
                    if port == 3 {
                        __H1.Q_in.pushBack((pkt, 1));
                    }
                }
            } else {
                if node == 0 && __H0.Q_in.size() {
                    __H0.__run();
                }
                if node == 1 && __H1.Q_in.size() {
                    __H1.__run();
                }
                if node == 2 && __S0.Q_in.size() {
                    __S0.__run();
                }
                if node == 3 && __S1.Q_in.size() {
                    __S1.__run();
                }
                if node == 4 && __S2.Q_in.size() {
                    __S2.__run();
                }
                if node == 5 && __S3.Q_in.size() {
                    __S3.__run();
                }
                if node == 6 && __S4.Q_in.size() {
                    __S4.__run();
                }
                if node == 7 && __S5.Q_in.size() {
                    __S5.__run();
                }
                if node == 8 && __S6.Q_in.size() {
                    __S6.__run();
                }
                if node == 9 && __S7.Q_in.size() {
                    __S7.__run();
                }
                if node == 10 && __S8.Q_in.size() {
                    __S8.__run();
                }
                if node == 11 && __S9.Q_in.size() {
                    __S9.__run();
                }
                if node == 12 && __S10.Q_in.size() {
                    __S10.__run();
                }
                if node == 13 && __S11.Q_in.size() {
                    __S11.__run();
                }
                if node == 14 && __S12.Q_in.size() {
                    __S12.__run();
                }
                if node == 15 && __S13.Q_in.size() {
                    __S13.__run();
                }
                if node == 16 && __S14.Q_in.size() {
                    __S14.__run();
                }
                if node == 17 && __S15.Q_in.size() {
                    __S15.__run();
                }
                if node == 18 && __S16.Q_in.size() {
                    __S16.__run();
                }
                if node == 19 && __S17.Q_in.size() {
                    __S17.__run();
                }
                if node == 20 && __S18.Q_in.size() {
                    __S18.__run();
                }
                if node == 21 && __S19.Q_in.size() {
                    __S19.__run();
                }
                if node == 22 && __S20.Q_in.size() {
                    __S20.__run();
                }
                if node == 23 && __S21.Q_in.size() {
                    __S21.__run();
                }
                if node == 24 && __S22.Q_in.size() {
                    __S22.__run();
                }
                if node == 25 && __S23.Q_in.size() {
                    __S23.__run();
                }
                if node == 26 && __S24.Q_in.size() {
                    __S24.__run();
                }
                if node == 27 && __S25.Q_in.size() {
                    __S25.__run();
                }
                if node == 28 && __S26.Q_in.size() {
                    __S26.__run();
                }
                if node == 29 && __S27.Q_in.size() {
                    __S27.__run();
                }
            }
        }
    }
}
def main(){
    __d := __D();
    __d.__H0.Q_in.pushBack((Packet(),0));
    __d.__H0.__run();
    repeat num_steps {
        __d.__step();
    }
    assert(!(__d.__H0.Q_in.size() || __d.__H0.Q_out.size() || __d.__H1.Q_in.size() || __d.__H1.Q_out.size() || __d.__S0.Q_in.size() || __d.__S0.Q_out.size() || __d.__S1.Q_in.size() || __d.__S1.Q_out.size() || __d.__S2.Q_in.size() || __d.__S2.Q_out.size() || __d.__S3.Q_in.size() || __d.__S3.Q_out.size() || __d.__S4.Q_in.size() || __d.__S4.Q_out.size() || __d.__S5.Q_in.size() || __d.__S5.Q_out.size() || __d.__S6.Q_in.size() || __d.__S6.Q_out.size() || __d.__S7.Q_in.size() || __d.__S7.Q_out.size() || __d.__S8.Q_in.size() || __d.__S8.Q_out.size() || __d.__S9.Q_in.size() || __d.__S9.Q_out.size() || __d.__S10.Q_in.size() || __d.__S10.Q_out.size() || __d.__S11.Q_in.size() || __d.__S11.Q_out.size() || __d.__S12.Q_in.size() || __d.__S12.Q_out.size() || __d.__S13.Q_in.size() || __d.__S13.Q_out.size() || __d.__S14.Q_in.size() || __d.__S14.Q_out.size() || __d.__S15.Q_in.size() || __d.__S15.Q_out.size() || __d.__S16.Q_in.size() || __d.__S16.Q_out.size() || __d.__S17.Q_in.size() || __d.__S17.Q_out.size() || __d.__S18.Q_in.size() || __d.__S18.Q_out.size() || __d.__S19.Q_in.size() || __d.__S19.Q_out.size() || __d.__S20.Q_in.size() || __d.__S20.Q_out.size() || __d.__S21.Q_in.size() || __d.__S21.Q_out.size() || __d.__S22.Q_in.size() || __d.__S22.Q_out.size() || __d.__S23.Q_in.size() || __d.__S23.Q_out.size() || __d.__S24.Q_in.size() || __d.__S24.Q_out.size() || __d.__S25.Q_in.size() || __d.__S25.Q_out.size() || __d.__S26.Q_in.size() || __d.__S26.Q_out.size() || __d.__S27.Q_in.size() || __d.__S27.Q_out.size()));
    q₁ := Expectation(((if H1 == 1 { __d.__H1.arrived } else { assert(0) }) == 1) !=0);
    return (q₁);
}

