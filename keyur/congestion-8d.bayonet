
parameters{ NUM_PACKETS(3), COST_01(2), COST_02(1), COST_21(1) }

num_steps 50;

query probability(pkt_count@H0 < NUM_PACKETS);
query probability(pkt_count@H1 < NUM_PACKETS);

topology{
	nodes{ H0, H1, S0, S1, S2, S3, S4, S5 }
	links{
		(H0,pt1) <-> (S0,pt3),
		(S0,pt1) <-> (S1,pt1),
		(S0,pt2) <-> (S2,pt1),
		(S1,pt2) <-> (S2,pt2),
		(S1,pt3) <-> (S3,pt3),
		(S3,pt1) <-> (S4,pt1),
		(S3,pt2) <-> (S5,pt1),
		(S4,pt2) <-> (S5,pt2),
		(S4,pt3) <-> (H1,pt1)
	}
}
queue_capacity 2;

packet_fields{ dst }

programs{ H0 -> h0, H1 -> h1, S0 -> s0, S1 -> s1, S2 -> s2, S3 -> s0, S4 -> s1, S5 -> s2 }


def h0(pkt, port) state pkt_count(0){
	new;
	if pkt_count < NUM_PACKETS {
		new;
		pkt_count = pkt_count + 1;
		pkt.dst = H1;
		fwd(1);
	} else { drop; drop; }
}

def h1(pkt, port) state pkt_count(0){ pkt_count = pkt_count + 1; drop; }


def s0(pkt, port) state route1(0), route2(0){
	if port == 1{
		fwd(3);
	}else if port == 2{
		if pkt.dst == H0{
			fwd(3);
		}else{
			fwd(1);
		}
	}else if port == 3{
		route1 = COST_01;
		route2 = COST_02 + COST_21;
		if route1 < route2 or route1 == route2 and flip(1/2) == 1 {
			fwd(1);
		}else{
			fwd(2);
		}
	}
}

def s1(pkt, port) state route1(0), route2(0){
	if port == 1 {
		fwd(3);
	}else if port == 2{
		if pkt.dst == H1{
			fwd(3);
		}else{
			fwd(1);
		}
	}else if port == 3{
		route1 = COST_01;
		route2 = COST_02 + COST_21;
		if route1 < route2 or route1 == route2 and flip(1/2) == 1 {
			fwd(1);
		}else{
			fwd(2);
		}
	}
}

def s2(pkt, port){
	if port == 1 {
		fwd(2);
	}else{
		fwd(1);
	}
}

def scheduler() state next(0){
	for i in [0..2*k){
		current := next;
		next = (next + 1) % (2 * k);
		if current < k && (Q_in@current).size() > 0 {
			return (RunSw,current);
		} else if current >= k && (Q_out@(current-k)).size() > 0 {
			return (FwdQ,current-k);
		}
	}
	assert(0);
}
