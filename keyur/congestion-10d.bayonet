parameters{ NUM_PACKETS(3), COST_01(1), COST_02(2), COST_03(3), COST_12(1), COST_23(1) }

queue_capacity 2;

query probability(pkt_count@H1 < NUM_PACKETS);

packet_fields{}


num_steps 54 ;
topology {
  nodes { H0, H1, S0, S1, S2, S3, S4, S5, S6, S7 }
  links {
    (H0,pt1) <-> (S0,pt1),

    (S0,pt2) <-> (S1,pt1),
    (S0,pt3) <-> (S2,pt1),
    (S0,pt4) <-> (S3,pt4),
    (S1,pt2) <-> (S3,pt1),
    (S2,pt2) <-> (S3,pt2),

    (S3,pt3) <-> (S4,pt1),

    (S4,pt2) <-> (S5,pt1),
    (S4,pt3) <-> (S6,pt1),
    (S4,pt4) <-> (S7,pt4),
    (S5,pt2) <-> (S7,pt1),
    (S6,pt2) <-> (S7,pt2),

    (S7,pt3) <-> (H1,pt1)
  }
}
programs { H0 -> h0, H1 -> h1, S0 -> s0, S1 -> s1, S2 -> s2, S3 -> s3, S4 -> s0, S5 -> s1, S6 -> s2, S7 -> s3 }


def h0(pkt, port) state pkt_count(0){
	new;
	if pkt_count < NUM_PACKETS{
		pkt_count = pkt_count + 1;
		fwd(1);
	}else { drop; drop; }
}

def h1(pkt, port) state pkt_count(0){
	pkt_count = pkt_count + 1;
	drop;
}

def s0(pkt, port)
state
route1(0), route2(0), route3(0),
shortest1(0), shortest2(0), shortest3(0),
nshortest(0), which(0)
{
	if port == 1{
		route1 = COST_01 + COST_12 + COST_23;
		route2 = COST_03;
		route3 = COST_02 + COST_23;
		shortest1=0; shortest2=0; shortest3=0;
		if (route1 <= route2 && route2 <= route3) { shortest1 = 1; }
		if (route2 <= route1 && route2 <= route3) { shortest2 = 1; }
		if (route3 <= route1 && route3 <= route2) { shortest3 = 1; }
		nshortest = shortest1 + shortest2 + shortest3;
		if (nshortest==1) {
			which = 1;
		} else if (nshortest==2) {
			which = uniformInt(1,2);
		} else {
			which = uniformInt(1,3);
		}
		if which == shortest1 { fwd(2); }
		else if which == shortest1+shortest2 { fwd(3); }
		else { fwd(4); }
	}
}

def s1(pkt,port){
	if port == 1{
		fwd(2);
	}
}
def s2(pkt,port){
	if port == 1{
		fwd(2);
	}
}
def s3(pkt,port){
	if port == 1 || port == 2 || port == 4{
		fwd(3);
	}
}

def scheduler() state next(0){
	for i in [0..2*k){
		current := next;
		next = (next + 1) % (2 * k);
		if current < k && (Q_in@current).size() > 0 {
			return (RunSw,current);
		} else if current >= k && (Q_out@(current-k)).size() > 0 {
			return (FwdQ,current-k);
		}
	}
	assert(0);
}
