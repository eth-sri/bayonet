dtmc
global unlk:bool init true;
global assrtOK:bool init true;
global obsrvOK:bool init true;
const int INTMIN = 0; const int INTMAX = 255;
const int maxNumSteps = 20;
global numSteps:[0..maxNumSteps] init 0;
module n2S0
n2S0v8infected:[INTMIN..INTMAX] init 0;
n2S0t0:[1..3];
n2S0ip0:[1..3] init 1;
n2S0ip1:[1..3] init 1;
n2S0is:[0..2] init 1;
n2S0op0:[1..3] init 1;
n2S0op1:[1..3] init 1;
n2S0os:[0..2] init 0;
n2S0opt:[1..3] init 1;
n2S0pc:[-6..8] init 0; n2S0ra:[-6..8] init 0;
[] n2S0is<2 & n2S0pc=-1 -> (n2S0ip0'=1)&(n2S0ip1'=n2S0ip0)&(n2S0is'=n2S0is+1)&(n2S0pc'=n2S0ra);
[] n2S0is=2 & n2S0pc=-1 -> (n2S0pc'=n2S0ra);
[] n2S0is=0 & n2S0pc=-2 -> (n2S0pc'=n2S0ra);
[] n2S0is>0 & n2S0is<2 & n2S0pc=-2 -> (n2S0ip1'=n2S0ip0)&(n2S0is'=n2S0is+1)&(n2S0pc'=n2S0ra);
[] n2S0is=2 & n2S0pc=-2 -> (n2S0pc'=n2S0ra);
[] n2S0is=0 & n2S0pc=-3 -> (n2S0pc'=n2S0ra);
[] n2S0is>0 & n2S0pc=-3 -> (n2S0ip0'=n2S0ip1)&(n2S0is'=n2S0is-1)&(n2S0pc'=n2S0ra);
[] n2S0os=0 & n2S0pc=-4 -> (n2S0op0'=n2S0opt)&(n2S0os'=1)&(n2S0pc'=-3);
[] n2S0os=1 & n2S0pc=-4 -> (n2S0op1'=n2S0opt)&(n2S0os'=2)&(n2S0pc'=-3);
[] n2S0os=2 & n2S0pc=-4 -> (n2S0pc'=-3);
[n2S3f1] n2S0is=0 -> (n2S0ip0'=3)&(n2S0is'=1);
[n2S3f1] n2S0is=1 -> (n2S0ip1'=3)&(n2S0is'=2);
[n2S3f1] n2S0is=2 -> true;
[n2S2f2] n2S0is=0 -> (n2S0ip0'=2)&(n2S0is'=1);
[n2S2f2] n2S0is=1 -> (n2S0ip1'=2)&(n2S0is'=2);
[n2S2f2] n2S0is=2 -> true;
[n2S1f3] n2S0is=0 -> (n2S0ip0'=1)&(n2S0is'=1);
[n2S1f3] n2S0is=1 -> (n2S0ip1'=1)&(n2S0is'=2);
[n2S1f3] n2S0is=2 -> true;
[] unlk & numSteps<maxNumSteps & n2S0pc=0 & n2S0os>0 -> (n2S0pc'=-5)&(unlk'=false);
[n2S0f3] n2S0pc=-5 & n2S0os>0 & n2S0op0=3 -> (n2S0op0'=n2S0op1)&(n2S0os'=n2S0os-1)&(n2S0pc'=-6);
[n2S0f2] n2S0pc=-5 & n2S0os>0 & n2S0op0=2 -> (n2S0op0'=n2S0op1)&(n2S0os'=n2S0os-1)&(n2S0pc'=-6);
[n2S0f1] n2S0pc=-5 & n2S0os>0 & n2S0op0=1 -> (n2S0op0'=n2S0op1)&(n2S0os'=n2S0os-1)&(n2S0pc'=-6);
[] numSteps<maxNumSteps & n2S0pc=-6 -> (n2S0pc'=0)&(unlk'=true)&(numSteps'=numSteps+1);
[] unlk & numSteps<maxNumSteps & n2S0pc=0 & n2S0is>0 -> (n2S0pc'=1)&(unlk'=false);
[] n2S0pc=1 & (n2S0v8infected=0) -> (n2S0pc'=2);
[] n2S0pc=1 & !((n2S0v8infected=0)) -> (n2S0pc'=7);
[] n2S0pc=2 & 1>=INTMIN & 1<=INTMAX -> (n2S0v8infected'=1)&(n2S0pc'=3);
[] n2S0pc=3 -> (n2S0pc'=-1)&(n2S0ra'=4);
[] n2S0pc=4 -> 0.333333:(n2S0t0'=1)&(n2S0pc'=5) + 0.333333:(n2S0t0'=2)&(n2S0pc'=5) + 0.333333:(n2S0t0'=3)&(n2S0pc'=5);
[] n2S0pc=5 -> (n2S0opt'=n2S0t0)&(n2S0pc'=-4)&(n2S0ra'=6);
[] n2S0pc=6 -> (n2S0pc'=8);
[] n2S0pc=7 -> (n2S0pc'=-3)&(n2S0ra'=8);
[] numSteps<maxNumSteps & n2S0pc=8 -> (n2S0pc'=0)&(unlk'=true)&(numSteps'=numSteps+1);
endmodule
module n2S3
n2S3v8infected:[INTMIN..INTMAX] init 0;
n2S3t0:[1..3];
n2S3t1:[1..3];
n2S3ip0:[1..3] init 1;
n2S3ip1:[1..3] init 1;
n2S3is:[0..2] init 0;
n2S3op0:[1..3] init 1;
n2S3op1:[1..3] init 1;
n2S3os:[0..2] init 0;
n2S3opt:[1..3] init 1;
n2S3pc:[-6..10] init 0; n2S3ra:[-6..10] init 0;
[] n2S3is<2 & n2S3pc=-1 -> (n2S3ip0'=1)&(n2S3ip1'=n2S3ip0)&(n2S3is'=n2S3is+1)&(n2S3pc'=n2S3ra);
[] n2S3is=2 & n2S3pc=-1 -> (n2S3pc'=n2S3ra);
[] n2S3is=0 & n2S3pc=-2 -> (n2S3pc'=n2S3ra);
[] n2S3is>0 & n2S3is<2 & n2S3pc=-2 -> (n2S3ip1'=n2S3ip0)&(n2S3is'=n2S3is+1)&(n2S3pc'=n2S3ra);
[] n2S3is=2 & n2S3pc=-2 -> (n2S3pc'=n2S3ra);
[] n2S3is=0 & n2S3pc=-3 -> (n2S3pc'=n2S3ra);
[] n2S3is>0 & n2S3pc=-3 -> (n2S3ip0'=n2S3ip1)&(n2S3is'=n2S3is-1)&(n2S3pc'=n2S3ra);
[] n2S3os=0 & n2S3pc=-4 -> (n2S3op0'=n2S3opt)&(n2S3os'=1)&(n2S3pc'=-3);
[] n2S3os=1 & n2S3pc=-4 -> (n2S3op1'=n2S3opt)&(n2S3os'=2)&(n2S3pc'=-3);
[] n2S3os=2 & n2S3pc=-4 -> (n2S3pc'=-3);
[n2S2f1] n2S3is=0 -> (n2S3ip0'=3)&(n2S3is'=1);
[n2S2f1] n2S3is=1 -> (n2S3ip1'=3)&(n2S3is'=2);
[n2S2f1] n2S3is=2 -> true;
[n2S1f2] n2S3is=0 -> (n2S3ip0'=2)&(n2S3is'=1);
[n2S1f2] n2S3is=1 -> (n2S3ip1'=2)&(n2S3is'=2);
[n2S1f2] n2S3is=2 -> true;
[n2S0f3] n2S3is=0 -> (n2S3ip0'=1)&(n2S3is'=1);
[n2S0f3] n2S3is=1 -> (n2S3ip1'=1)&(n2S3is'=2);
[n2S0f3] n2S3is=2 -> true;
[] unlk & numSteps<maxNumSteps & n2S3pc=0 & n2S3os>0 -> (n2S3pc'=-5)&(unlk'=false);
[n2S3f3] n2S3pc=-5 & n2S3os>0 & n2S3op0=3 -> (n2S3op0'=n2S3op1)&(n2S3os'=n2S3os-1)&(n2S3pc'=-6);
[n2S3f2] n2S3pc=-5 & n2S3os>0 & n2S3op0=2 -> (n2S3op0'=n2S3op1)&(n2S3os'=n2S3os-1)&(n2S3pc'=-6);
[n2S3f1] n2S3pc=-5 & n2S3os>0 & n2S3op0=1 -> (n2S3op0'=n2S3op1)&(n2S3os'=n2S3os-1)&(n2S3pc'=-6);
[] numSteps<maxNumSteps & n2S3pc=-6 -> (n2S3pc'=0)&(unlk'=true)&(numSteps'=numSteps+1);
[] unlk & numSteps<maxNumSteps & n2S3pc=0 & n2S3is>0 -> (n2S3pc'=1)&(unlk'=false);
[] n2S3pc=1 & (n2S3v8infected=0) -> (n2S3pc'=2);
[] n2S3pc=1 & !((n2S3v8infected=0)) -> (n2S3pc'=9);
[] n2S3pc=2 & 1>=INTMIN & 1<=INTMAX -> (n2S3v8infected'=1)&(n2S3pc'=3);
[] n2S3pc=3 -> (n2S3pc'=-2)&(n2S3ra'=4);
[] n2S3pc=4 -> 0.333333:(n2S3t0'=1)&(n2S3pc'=5) + 0.333333:(n2S3t0'=2)&(n2S3pc'=5) + 0.333333:(n2S3t0'=3)&(n2S3pc'=5);
[] n2S3pc=5 -> (n2S3opt'=n2S3t0)&(n2S3pc'=-4)&(n2S3ra'=6);
[] n2S3pc=6 -> 0.333333:(n2S3t1'=1)&(n2S3pc'=7) + 0.333333:(n2S3t1'=2)&(n2S3pc'=7) + 0.333333:(n2S3t1'=3)&(n2S3pc'=7);
[] n2S3pc=7 -> (n2S3opt'=n2S3t1)&(n2S3pc'=-4)&(n2S3ra'=8);
[] n2S3pc=8 -> (n2S3pc'=10);
[] n2S3pc=9 -> (n2S3pc'=-3)&(n2S3ra'=10);
[] numSteps<maxNumSteps & n2S3pc=10 -> (n2S3pc'=0)&(unlk'=true)&(numSteps'=numSteps+1);
endmodule
module n2S2
n2S2v8infected:[INTMIN..INTMAX] init 0;
n2S2t0:[1..3];
n2S2t1:[1..3];
n2S2ip0:[1..3] init 1;
n2S2ip1:[1..3] init 1;
n2S2is:[0..2] init 0;
n2S2op0:[1..3] init 1;
n2S2op1:[1..3] init 1;
n2S2os:[0..2] init 0;
n2S2opt:[1..3] init 1;
n2S2pc:[-6..10] init 0; n2S2ra:[-6..10] init 0;
[] n2S2is<2 & n2S2pc=-1 -> (n2S2ip0'=1)&(n2S2ip1'=n2S2ip0)&(n2S2is'=n2S2is+1)&(n2S2pc'=n2S2ra);
[] n2S2is=2 & n2S2pc=-1 -> (n2S2pc'=n2S2ra);
[] n2S2is=0 & n2S2pc=-2 -> (n2S2pc'=n2S2ra);
[] n2S2is>0 & n2S2is<2 & n2S2pc=-2 -> (n2S2ip1'=n2S2ip0)&(n2S2is'=n2S2is+1)&(n2S2pc'=n2S2ra);
[] n2S2is=2 & n2S2pc=-2 -> (n2S2pc'=n2S2ra);
[] n2S2is=0 & n2S2pc=-3 -> (n2S2pc'=n2S2ra);
[] n2S2is>0 & n2S2pc=-3 -> (n2S2ip0'=n2S2ip1)&(n2S2is'=n2S2is-1)&(n2S2pc'=n2S2ra);
[] n2S2os=0 & n2S2pc=-4 -> (n2S2op0'=n2S2opt)&(n2S2os'=1)&(n2S2pc'=-3);
[] n2S2os=1 & n2S2pc=-4 -> (n2S2op1'=n2S2opt)&(n2S2os'=2)&(n2S2pc'=-3);
[] n2S2os=2 & n2S2pc=-4 -> (n2S2pc'=-3);
[n2S1f1] n2S2is=0 -> (n2S2ip0'=3)&(n2S2is'=1);
[n2S1f1] n2S2is=1 -> (n2S2ip1'=3)&(n2S2is'=2);
[n2S1f1] n2S2is=2 -> true;
[n2S0f2] n2S2is=0 -> (n2S2ip0'=2)&(n2S2is'=1);
[n2S0f2] n2S2is=1 -> (n2S2ip1'=2)&(n2S2is'=2);
[n2S0f2] n2S2is=2 -> true;
[n2S3f3] n2S2is=0 -> (n2S2ip0'=1)&(n2S2is'=1);
[n2S3f3] n2S2is=1 -> (n2S2ip1'=1)&(n2S2is'=2);
[n2S3f3] n2S2is=2 -> true;
[] unlk & numSteps<maxNumSteps & n2S2pc=0 & n2S2os>0 -> (n2S2pc'=-5)&(unlk'=false);
[n2S2f3] n2S2pc=-5 & n2S2os>0 & n2S2op0=3 -> (n2S2op0'=n2S2op1)&(n2S2os'=n2S2os-1)&(n2S2pc'=-6);
[n2S2f2] n2S2pc=-5 & n2S2os>0 & n2S2op0=2 -> (n2S2op0'=n2S2op1)&(n2S2os'=n2S2os-1)&(n2S2pc'=-6);
[n2S2f1] n2S2pc=-5 & n2S2os>0 & n2S2op0=1 -> (n2S2op0'=n2S2op1)&(n2S2os'=n2S2os-1)&(n2S2pc'=-6);
[] numSteps<maxNumSteps & n2S2pc=-6 -> (n2S2pc'=0)&(unlk'=true)&(numSteps'=numSteps+1);
[] unlk & numSteps<maxNumSteps & n2S2pc=0 & n2S2is>0 -> (n2S2pc'=1)&(unlk'=false);
[] n2S2pc=1 & (n2S2v8infected=0) -> (n2S2pc'=2);
[] n2S2pc=1 & !((n2S2v8infected=0)) -> (n2S2pc'=9);
[] n2S2pc=2 & 1>=INTMIN & 1<=INTMAX -> (n2S2v8infected'=1)&(n2S2pc'=3);
[] n2S2pc=3 -> (n2S2pc'=-2)&(n2S2ra'=4);
[] n2S2pc=4 -> 0.333333:(n2S2t0'=1)&(n2S2pc'=5) + 0.333333:(n2S2t0'=2)&(n2S2pc'=5) + 0.333333:(n2S2t0'=3)&(n2S2pc'=5);
[] n2S2pc=5 -> (n2S2opt'=n2S2t0)&(n2S2pc'=-4)&(n2S2ra'=6);
[] n2S2pc=6 -> 0.333333:(n2S2t1'=1)&(n2S2pc'=7) + 0.333333:(n2S2t1'=2)&(n2S2pc'=7) + 0.333333:(n2S2t1'=3)&(n2S2pc'=7);
[] n2S2pc=7 -> (n2S2opt'=n2S2t1)&(n2S2pc'=-4)&(n2S2ra'=8);
[] n2S2pc=8 -> (n2S2pc'=10);
[] n2S2pc=9 -> (n2S2pc'=-3)&(n2S2ra'=10);
[] numSteps<maxNumSteps & n2S2pc=10 -> (n2S2pc'=0)&(unlk'=true)&(numSteps'=numSteps+1);
endmodule
module n2S1
n2S1v8infected:[INTMIN..INTMAX] init 0;
n2S1t0:[1..3];
n2S1t1:[1..3];
n2S1ip0:[1..3] init 1;
n2S1ip1:[1..3] init 1;
n2S1is:[0..2] init 0;
n2S1op0:[1..3] init 1;
n2S1op1:[1..3] init 1;
n2S1os:[0..2] init 0;
n2S1opt:[1..3] init 1;
n2S1pc:[-6..10] init 0; n2S1ra:[-6..10] init 0;
[] n2S1is<2 & n2S1pc=-1 -> (n2S1ip0'=1)&(n2S1ip1'=n2S1ip0)&(n2S1is'=n2S1is+1)&(n2S1pc'=n2S1ra);
[] n2S1is=2 & n2S1pc=-1 -> (n2S1pc'=n2S1ra);
[] n2S1is=0 & n2S1pc=-2 -> (n2S1pc'=n2S1ra);
[] n2S1is>0 & n2S1is<2 & n2S1pc=-2 -> (n2S1ip1'=n2S1ip0)&(n2S1is'=n2S1is+1)&(n2S1pc'=n2S1ra);
[] n2S1is=2 & n2S1pc=-2 -> (n2S1pc'=n2S1ra);
[] n2S1is=0 & n2S1pc=-3 -> (n2S1pc'=n2S1ra);
[] n2S1is>0 & n2S1pc=-3 -> (n2S1ip0'=n2S1ip1)&(n2S1is'=n2S1is-1)&(n2S1pc'=n2S1ra);
[] n2S1os=0 & n2S1pc=-4 -> (n2S1op0'=n2S1opt)&(n2S1os'=1)&(n2S1pc'=-3);
[] n2S1os=1 & n2S1pc=-4 -> (n2S1op1'=n2S1opt)&(n2S1os'=2)&(n2S1pc'=-3);
[] n2S1os=2 & n2S1pc=-4 -> (n2S1pc'=-3);
[n2S0f1] n2S1is=0 -> (n2S1ip0'=3)&(n2S1is'=1);
[n2S0f1] n2S1is=1 -> (n2S1ip1'=3)&(n2S1is'=2);
[n2S0f1] n2S1is=2 -> true;
[n2S3f2] n2S1is=0 -> (n2S1ip0'=2)&(n2S1is'=1);
[n2S3f2] n2S1is=1 -> (n2S1ip1'=2)&(n2S1is'=2);
[n2S3f2] n2S1is=2 -> true;
[n2S2f3] n2S1is=0 -> (n2S1ip0'=1)&(n2S1is'=1);
[n2S2f3] n2S1is=1 -> (n2S1ip1'=1)&(n2S1is'=2);
[n2S2f3] n2S1is=2 -> true;
[] unlk & numSteps<maxNumSteps & n2S1pc=0 & n2S1os>0 -> (n2S1pc'=-5)&(unlk'=false);
[n2S1f3] n2S1pc=-5 & n2S1os>0 & n2S1op0=3 -> (n2S1op0'=n2S1op1)&(n2S1os'=n2S1os-1)&(n2S1pc'=-6);
[n2S1f2] n2S1pc=-5 & n2S1os>0 & n2S1op0=2 -> (n2S1op0'=n2S1op1)&(n2S1os'=n2S1os-1)&(n2S1pc'=-6);
[n2S1f1] n2S1pc=-5 & n2S1os>0 & n2S1op0=1 -> (n2S1op0'=n2S1op1)&(n2S1os'=n2S1os-1)&(n2S1pc'=-6);
[] numSteps<maxNumSteps & n2S1pc=-6 -> (n2S1pc'=0)&(unlk'=true)&(numSteps'=numSteps+1);
[] unlk & numSteps<maxNumSteps & n2S1pc=0 & n2S1is>0 -> (n2S1pc'=1)&(unlk'=false);
[] n2S1pc=1 & (n2S1v8infected=0) -> (n2S1pc'=2);
[] n2S1pc=1 & !((n2S1v8infected=0)) -> (n2S1pc'=9);
[] n2S1pc=2 & 1>=INTMIN & 1<=INTMAX -> (n2S1v8infected'=1)&(n2S1pc'=3);
[] n2S1pc=3 -> (n2S1pc'=-2)&(n2S1ra'=4);
[] n2S1pc=4 -> 0.333333:(n2S1t0'=1)&(n2S1pc'=5) + 0.333333:(n2S1t0'=2)&(n2S1pc'=5) + 0.333333:(n2S1t0'=3)&(n2S1pc'=5);
[] n2S1pc=5 -> (n2S1opt'=n2S1t0)&(n2S1pc'=-4)&(n2S1ra'=6);
[] n2S1pc=6 -> 0.333333:(n2S1t1'=1)&(n2S1pc'=7) + 0.333333:(n2S1t1'=2)&(n2S1pc'=7) + 0.333333:(n2S1t1'=3)&(n2S1pc'=7);
[] n2S1pc=7 -> (n2S1opt'=n2S1t1)&(n2S1pc'=-4)&(n2S1ra'=8);
[] n2S1pc=8 -> (n2S1pc'=10);
[] n2S1pc=9 -> (n2S1pc'=-3)&(n2S1ra'=10);
[] numSteps<maxNumSteps & n2S1pc=10 -> (n2S1pc'=0)&(unlk'=true)&(numSteps'=numSteps+1);
endmodule
module finisher
finished:bool init false;
[] !finished & assrtOK & unlk & n2S0is=0 & n2S0os=0 & n2S1is=0 & n2S1os=0 & n2S2is=0 & n2S2os=0 & n2S3is=0 & n2S3os=0 -> (finished'=true);
endmodule
rewards "exp0"
!finished & unlk & n2S0is=0 & n2S0os=0 & n2S1is=0 & n2S1os=0 & n2S2is=0 & n2S2os=0 & n2S3is=0 & n2S3os=0 : (((n2S0v8infected+n2S1v8infected)+n2S2v8infected)+n2S3v8infected);
endrewards

//Properties

//  R{"exp0"}=? [ F finished ]
