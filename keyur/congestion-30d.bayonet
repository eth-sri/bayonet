
parameters{ NUM_PACKETS(3) }

queue_capacity 2;

packet_fields{}

query probability(pkt_count@H1 < NUM_PACKETS);


num_steps 144 ;
topology {
  nodes { H0, H1, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15, S16, S17, S18, S19, S20, S21, S22, S23, S24, S25, S26, S27 }
  links {
    (H0,pt1) <-> (S0,pt1),

    (S0,pt2) <-> (S1,pt1),
    (S0,pt3) <-> (S2,pt1),
    (S1,pt2) <-> (S3,pt1),
    (S2,pt2) <-> (S3,pt2),

    (S3,pt3) <-> (S4,pt1),

    (S4,pt2) <-> (S5,pt1),
    (S4,pt3) <-> (S6,pt1),
    (S5,pt2) <-> (S7,pt1),
    (S6,pt2) <-> (S7,pt2),

    (S7,pt3) <-> (S8,pt1),

    (S8,pt2) <-> (S9,pt1),
    (S8,pt3) <-> (S10,pt1),
    (S9,pt2) <-> (S11,pt1),
    (S10,pt2) <-> (S11,pt2),

    (S11,pt3) <-> (S12,pt1),

    (S12,pt2) <-> (S13,pt1),
    (S12,pt3) <-> (S14,pt1),
    (S13,pt2) <-> (S15,pt1),
    (S14,pt2) <-> (S15,pt2),

    (S15,pt3) <-> (S16,pt1),

    (S16,pt2) <-> (S17,pt1),
    (S16,pt3) <-> (S18,pt1),
    (S17,pt2) <-> (S19,pt1),
    (S18,pt2) <-> (S19,pt2),

    (S19,pt3) <-> (S20,pt1),

    (S20,pt2) <-> (S21,pt1),
    (S20,pt3) <-> (S22,pt1),
    (S21,pt2) <-> (S23,pt1),
    (S22,pt2) <-> (S23,pt2),

    (S23,pt3) <-> (S24,pt1),

    (S24,pt2) <-> (S25,pt1),
    (S24,pt3) <-> (S26,pt1),
    (S25,pt2) <-> (S27,pt1),
    (S26,pt2) <-> (S27,pt2),

    (S27,pt3) <-> (H1,pt1)
  }
}
programs { H0 -> h0, H1 -> h1, S0 -> s0, S1 -> s1, S2 -> s2, S3 -> s3, S4 -> s0, S5 -> s1, S6 -> s2, S7 -> s3, S8 -> s0, S9 -> s1, S10 -> s2, S11 -> s3, S12 -> s0, S13 -> s1, S14 -> s2, S15 -> s3, S16 -> s0, S17 -> s1, S18 -> s2, S19 -> s3, S20 -> s0, S21 -> s1, S22 -> s2, S23 -> s3, S24 -> s0, S25 -> s1, S26 -> s2, S27 -> s3 }


def h0(pkt, port) state pkt_count(0) {
  if pkt_count < NUM_PACKETS {
    pkt_count = pkt_count + 1;
    fwd(1);
    new;
  } else {
    drop;
  }
}

def h1(pkt, port) state pkt_count(0) { pkt_count = pkt_count + 1; drop; }


def s0(pkt, port) { fwd(uniformInt(2,3)); }

def s1(pkt, port) { fwd(2); }

def s2(pkt, port) { fwd(2); }

def s3(pkt, port) { fwd(3); }

def scheduler() state next(0) {
  for i in [0..2*k){
    current := next;
    next = (next + 1) % (2 * k);
    if current < k && (Q_in@current).size() > 0 {
      return (RunSw,current);
    } else if current >= k && (Q_out@(current-k)).size() > 0 {
      return (FwdQ,current-k);
    }
  }
  assert(0);
}
