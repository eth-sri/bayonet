parameters{ NUM_PACKETS(3) }

num_steps 60;

query probability(pkt_count@H1 < NUM_PACKETS);

topology{
  nodes{ H0, H1, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10 }
  links{
    (H0,pt1) <-> (S9,pt3),
    (S9,pt1) <-> (S0,pt1),
    (S9,pt2) <-> (S3,pt1),
    (S0,pt2) <-> (S7,pt1),
    (S0,pt3) <-> (S1,pt1),
    (S1,pt4) <-> (S2,pt2),
    (S1,pt2) <-> (S6,pt3),
    (S1,pt3) <-> (S8,pt3),
    (S2,pt1) <-> (S3,pt2),
    (S2,pt3) <-> (S4,pt1),
    (S4,pt2) <-> (S5,pt1),
    (S5,pt2) <-> (S6,pt1),
    (S6,pt2) <-> (S10,pt1),
    (S7,pt2) <-> (S8,pt1),
    (S8,pt2) <-> (S10,pt3),
    (S10,pt2) <-> (H1,pt1)
  }
}
queue_capacity 2;

packet_fields{ }

programs{ H0 -> cngsrc, H1 -> cngdst, S0 -> swch1, S1 -> swch1, S2 -> swch2, S3 -> fwdr, S4 -> fwdr, S5 -> fwdr, S6 -> fwdr, S7 -> fwdr, S8 -> fwdr, S9 -> swch3, S10 -> fwdr }

def cngsrc(pkt, port) state pkt_count(0) {
  if pkt_count < NUM_PACKETS {
    pkt_count = pkt_count + 1;
    fwd(1);
    new;
  } else {
    drop;
  }
}

def cngdst(pkt, port) state pkt_count(0) {
  pkt_count = pkt_count + 1;
  drop;
}

def fwdr(pkt, port) {
  fwd(2);
}

def swch1(pkt, port) {
  fwd(flip(1/2)+2);
}

def swch2(pkt, port) {
  fwd(flip(3/7)+2);
}

def swch3(pkt, port) {
  fwd(flip(4/9)+1);
}

def scheduler() state next(0){
	for i in [0..2*k){
		current := next;
		next = (next + 1) % (2 * k);
		if current < k && (Q_in@current).size() > 0 {
			return (RunSw,current);
		} else if current >= k && (Q_out@(current-k)).size() > 0 {
			return (FwdQ,current-k);
		}
	}
	assert(0);
}
