parameters{ NUM_PACKETS(3) }

num_steps 50;

query probability(pkt_count@H1 < NUM_PACKETS);

topology{
  nodes{ H0, H1, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9 }
  links{
    (H0,pt1) <-> (S8,pt3),
    (S8,pt1) <-> (S0,pt1),
    (S8,pt2) <-> (S5,pt1),
    (S0,pt2) <-> (S1,pt1),
    (S0,pt3) <-> (S2,pt1),
    (S1,pt2) <-> (S9,pt1),
    (S2,pt2) <-> (S3,pt1),
    (S3,pt2) <-> (S4,pt1),
    (S4,pt2) <-> (S9,pt4),
    (S5,pt2) <-> (S6,pt1),
    (S6,pt2) <-> (S7,pt1),
    (S7,pt2) <-> (S9,pt3),
    (S9,pt2) <-> (H1,pt1)
  }
}
queue_capacity 2;

packet_fields{ }

programs{ H0 -> cngsrc, H1 -> cngdst, S0 -> swch2, S1 -> fwdr, S2 -> fwdr, S3 -> fwdr, S4 -> fwdr, S5 -> fwdr, S6 -> fwdr, S7 -> fwdr, S8 -> swch1, S9 -> fwdr }

def cngsrc(pkt, port) state pkt_count(0) {
  if pkt_count < NUM_PACKETS {
    pkt_count = pkt_count + 1;
    fwd(1);
    new;
  } else {
    drop;
  }
}

def cngdst(pkt, port) state pkt_count(0) {
  pkt_count = pkt_count + 1;
  drop;
}

def fwdr(pkt, port) {
  fwd(2);
}

def swch1(pkt, port) {
  fwd(flip(11/23)+1);
}

def swch2(pkt, port) {
  fwd(flip(1/3)+2);
}

def scheduler(){
	actions := ([]: (R x R)[]);
	for i in [0..k){
		if (Q_in@i).size() > 0 { actions ~= [(RunSw,i)]; }
		if (Q_out@i).size() > 0 { actions ~= [(FwdQ,i)]; }
	}
	return actions[uniformInt(0,actions.length-1)];
}
